Written by Elaine Cui and Adam Liu
CUI00122 and LIU02390

Method                                  ArrayList Runtime           LinkedList Runtime              Explanation

add(T element)                           O(1)                       O(n)                            ArrayList is more efficient. This is because for ArrayList, no iteration is required because the user
                                                                                                    is simply adding the element to the last index, which is stored as an attribute. The copyMerge()
                                                                                                    method is also O(1), so the method is O(1). In LinkedList, you need to iterate through the entire list
                                                                                                    in order to get to the end of the list to add an element, making it O(n).


pairSwap()                               O(n)                       O(n)                            They are equally efficient. This is because for ArrayList, there is one for loop that iterates through
                                                                                                    the entire list to swap the elements. The amount of times to go through the loop depends on the
                                                                                                    size of the array, so it would be O(n). For LinkedList, you need to iterate through the entire list like
                                                                                                    ArrayList, so it would be O(n) in order to get through each of the data points to switch them. The actual
                                                                                                    switching part does not iterate.


merge(List<T>otherList)                  O(n)                       O(n)                            They are equally efficient. This is because for ArrayList, there is one loop. This is needed because for
                                                                                                    the loop, the loop will iterate until all spaces in the list are filled, which depends on the size
                                                                                                    of the list at that moment, so it would be O(n). For LinkedList, to merge, you iterate through the original
                                                                                                    list and add nodes from the other list. As a result, you only need to iterate through it once, making it O(n).


reverse()                                O(n)                      O(n)                             They are equally efficient. This is because for ArrayList, there is 2 loops that iterate but are not nested.
                                                                                                    The first loop reverses the array, so it has to go through half of the list. As the list gets larger,
                                                                                                    the loop is just O(n). The second loop is just checking if it is sorted, which also goes through the
                                                                                                    whole list, making the entire method O(n). For LinkedList, you iterate through the list and change the setNext()
                                                                                                    to the opposite way. As a result, you need to iterate through once, making it O(n) like ArrayList.